{{- $global := .Values.global }}
{{- range $cluster, $config := .Values.clusters }}
{{- $connect_name := (printf "%s-%s" (include "kafka-connect.name" $) $cluster) }}
{{- $jvmOptions := $config.jvmOptions | default $global.jvmOptions -}}
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnect
metadata:
  name: {{ $connect_name }}
  annotations:
    strimzi.io/use-connector-resources: "true"
spec:
  image: {{ $.Values.image }}
  jvmOptions:
    {{- range $opt, $value := $jvmOptions }}
    {{ $opt | quote }}: {{ $value | quote }}
    {{- end }}
  version: {{ $config.version | default $global.version }}
  replicas: {{ $config.replicas | default $global.replicas }}
  resources:
  {{- if $config.resources -}}
    {{ $config.resources | toYaml | nindent 4 }}
  {{- else -}}
    {{ $global.resources | toYaml | nindent 4 }}
  {{- end }}
  bootstrapServers: {{ $.Values.kafka.bootstrapServers }}
{{- if $.Values.opentelemetry.enabled }}
  tracing:
    type: opentelemetry  
{{ end }}
  template:
    connectContainer:
      env:
{{- range $.Values.env }}
        - name: {{ .name }}
          value: {{ .value | quote }}
{{- end }}
{{- if $.Values.opentelemetry.enabled }}
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: {{ $.Values.opentelemetry.otlpEndpoint }}
        - name: OTEL_SERVICE_NAME
          value: {{ $.Values.opentelemetry.serviceName }}
{{- else }}
        - name: OTEL_METRICS_EXPORTER
          value: "none"
{{- end }}
    pod:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: strimzi.io/cluster
                    operator: In
                    values:
                      - {{ $connect_name }}
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
{{- if $.Values.monitoring.enabled }}                      
  metricsConfig:
    type: jmxPrometheusExporter
    valueFrom:
      configMapKeyRef:
        name: {{ printf "%s-metrics" (include "kafka-connect.name" $) }}
        key: metrics-config.yml
{{ end }}
  config:
    group.id: {{ $config.groupId | default $connect_name }}
    config.providers: {{ $config.providersClass | keys | join ", " }}
    {{- range $provider, $class := $config.providersClass }}
    config.providers.{{ $provider }}.class: {{ $class }}
    {{- end }}
{{- include "kafka-connect.storageConfig"  (dict "global" $global "config" $config "clustername" $connect_name) | indent 4}}
---
{{- end }}